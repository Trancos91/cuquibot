import datetime
import json
from pytz import timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, Defaults, CallbackQueryHandler, PollAnswerHandler)
from unidecode import unidecode
from modulos.editor import EditorSheet
from modulos.respuestas import Respuestas


##########################################################################
# Comandos
##########################################################################
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await update.message.reply_text('Holi, soy el Cuquibot, miau!'
        ' Escrib√≠ "/help" para ver los comandos disponibles :3')
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mensaje = ('Hola, nya! Soy la cuquibot üò∫\n'
    'Te paso la lista de comandos(instrucciones que empiezan con "/") y '
    'de palabras clave :)\n\n'
    'üìã <b><u>Lista de comandos:</u></b>\n'
    '  ‚Ä¢ <b>/agregartareas:</b> Agregar tareas a la lista de tareas. Separalas con comas!\n'
    '  ‚Ä¢ <b>/agregarcompras:</b> Agregar √≠tems a una lista de compras espec√≠fica. Escrib√≠'
    ' la primera palabra refiriendo a la lista, y despu√©s ingres√° las compras separadas por comas.'
    ' Por ejemplo: \n'
    '<pre>/agregarcompras super arroz, bicarbonato de sodio, az√∫car morena</pre>\n'
    '  ‚Ä¢ <b>/registrarviveres:</b> Agregar un √≠tem al registro de v√≠veres, a donde anotamos'
    ' las fechas de apertura y agotamiento de las cosas que compramos. Los √≠tems pueden '
    'contener la cantidad de ese √≠tem que se registra <i>entre par√©ntesis</i>. Por ejemplo:\n'
    '<pre>/registrarviveres Arroz(1kg), Lentejas(2kg), Leche de coco, Shampoo(500ml)</pre>\n'
    '  ‚Ä¢ <b>/despejartareas:</b> Despeja por completo la lista de tareas.\n'
    '  ‚Ä¢ <b>/despejarlistacompras:</b> Despeja por completo una lista de compras. Por ejemplo:\n'
    '<pre>/despejarlistacompras juanito</pre>\n'
    '  ‚Ä¢ <b>/despejarcompras:</b> Despeja compras de la lista de compras. Escrib√≠ la primera'
    ' palabra refiriendo a la lista, y despu√©s ingres√° las compras separadas por comas. Por ejemplo:\n'
    '<pre>/despejarcompras super leche de coco, man√≠, chocolate</pre>\n'
    '  ‚Ä¢ <b>/despejarunatarea:</b> Despeja una tarea de la lista de tareas.\n'
    '  ‚Ä¢ <b>/despejarregistrado:</b> Despeja <i>las fechas de apertura y agotamiento</i> '
    'de un elemento del registro de v√≠veres, dej√°ndolo listo para volver a registrar. '
    '<b>No</b> despeja el elemento en s√≠ de la lista.\n\n'
    'üìã <b><u>Listas de compras:</u></b>\n'
    '  ‚Ä¢ Supermercado(o "super", o "chino")\n'
    '  ‚Ä¢ Verduler√≠a(o "verdu")\n'
    '  ‚Ä¢ Mensuales(compras del coto mensuales)\n'
    '  ‚Ä¢ Juanito\n'
    '  ‚Ä¢ Farmacia\n'
    '  ‚Ä¢ Diarias(<i>s√≥lo se puede utilizar para acceder a la lista, no para agregar √≠tems. '
    'Combina las listas de Supermercado y Verduler√≠a</i>)\n\n'
    'üí° Por √∫ltimo, para acceder a la lista de palabras clave a las que respondo, '
    'que por lo general apuntan a pedidos de informaci√≥n o a anotar cosas m√°s cotidianas '
    'como los quehaceres, tageame y escrib√≠ <i>referencia</i> o <i>refe</i>'
        '(tambi√©n sirve <i>palabras</i>).')

    await update.message.reply_text(mensaje)

async def agregartareas_command(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = context.args
    tareas = procesar_par√°metros(args, 1)
    if error := chequear_contenido_par√°metros(tareas, 1):
        await update.message.reply_text(error)
    else:
        await update.message.reply_text(editor.agregar_√≠tems(tareas))

async def agregarcompras_command(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = context.args
    procesados = procesar_par√°metros(args, 2)
    if error := chequear_contenido_par√°metros(procesados, 2):
        await update.message.reply_text(error)
        return
    else:
        categor√≠a, compras = procesados

    if categor√≠a_obj := chequear_categor√≠a_compras(categor√≠a):
        categor√≠a_compras = categor√≠a_obj
    else:
        await update.message.reply_text("No encontr√© la lista :(")
        return

    await update.message.reply_text(editor.agregar_√≠tems(compras, categor√≠a=categor√≠a_compras))

async def registrarviveres_command(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = context.args
    √≠tems = procesar_par√°metros(args, 1)
    if error := chequear_contenido_par√°metros(√≠tems, 1):
        await update.message.reply_text(error)
        return
    else:
        await update.message.reply_text(editor.agregar_√≠tems(√≠tems, 1))


async def despejartareas_command(update: Update, 
                                      context: ContextTypes.DEFAULT_TYPE) -> None:
    """Confirma si borrar asistentes de la hoja"""
    keyboard = [
    [InlineKeyboardButton("üöß Despejar üöß", callback_data=("tareas 1"))],
    [InlineKeyboardButton("Cancelar", callback_data=("tareas 0"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("‚ö†Ô∏è Segurx quer√©s despejar la lista de tareas? ‚ö†Ô∏è", 
                                    reply_markup=reply_markup)

async def despejarcompras_command(update: Update, 
                                      context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = context.args
    procesados = procesar_par√°metros(args, 2)
    if error := chequear_contenido_par√°metros(procesados, 2):
        await update.message.reply_text(error)
        return
    else:
        categor√≠a, compras = procesados

    if categor√≠a_obj := chequear_categor√≠a_compras(categor√≠a):
        categor√≠a_compras = categor√≠a_obj
    else:
        await update.message.reply_text("No encontr√© la lista :(")
        return

    mensaje = editor.despejar_compras(compras, categor√≠a=categor√≠a_compras)
    if not mensaje:
        mensaje = f"Disculpame, no encontr√© los √≠tems "
        mensaje += ", ".join(compras)
        mensaje += " en la lista seleccionada üôÅ"

    await update.message.reply_text(mensaje)

    #compra = procesar_par√°metros(args, 2)
    #if error := chequear_contenido_par√°metros(compra, 0):
    #    await update.message.reply_text(error)
    #    return
    #lista_respuestas = Respuestas("nada", update).lista_compras
    #lista_compuesta = [palabra for lista in lista_respuestas.values() for palabra in lista]
    #lista_compuesta.append("diarias")
    #if not any(compra == palabra for palabra in lista_compuesta):
    #    await update.message.reply_text("Por favor aclar√° 'diarias', "
    #                                    "'mensuales', 'super', 'juanito' o 'farmacia' "
    #                                    "para definir la lista a despejar :)")
    #    return

    #"""Confirma si borrar asistentes de la hoja"""
    #keyboard = [
    #[InlineKeyboardButton("üöß Despejar üöß", callback_data=(f"{compra} 1"))],
    #[InlineKeyboardButton("Cancelar", callback_data=(f"{compra} 0"))]
    #]
    #reply_markup = InlineKeyboardMarkup(keyboard)
    #
    #await update.message.reply_text(f"‚ö†Ô∏è Segurx quer√©s despejar la lista de compras? ‚ö†Ô∏è", 
    #                                reply_markup=reply_markup)
async def despejarlistacompras_command(update:Update,
                                       context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    compra = procesar_par√°metros(args, 0)
    if error := chequear_contenido_par√°metros(compra, 0):
        await update.message.reply_text(error)
        return
    lista_respuestas = Respuestas("nada", update).lista_compras
    lista_compuesta = [palabra for lista in lista_respuestas.values() for palabra in lista]
    lista_compuesta.append("diarias")
    if not any(compra == palabra for palabra in lista_compuesta):
        await update.message.reply_text("Por favor aclar√° 'diarias', "
                                        "'mensuales', 'super', 'juanito' o 'farmacia' "
                                        "para definir la lista a despejar :)")
        return

    """Confirma si borrar asistentes de la hoja"""
    keyboard = [
    [InlineKeyboardButton("üöß Despejar üöß", callback_data=(f"{compra} 1"))],
    [InlineKeyboardButton("Cancelar", callback_data=(f"{compra} 0"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(f"‚ö†Ô∏è Segurx quer√©s despejar la lista de compras? ‚ö†Ô∏è", 
                                    reply_markup=reply_markup)


async def despejarunatarea_command(update:Update,
                                    context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    tarea = procesar_par√°metros(args, 4)
    if error := chequear_contenido_par√°metros(tarea, 1):
        await update.message.reply_text(error)
        return
    if mensaje := EditorSheet().despejar_tarea(tarea):
        await update.message.reply_text(mensaje)
    else:
        await update.message.reply_text(f"Disculpame, no encontr√© la tarea '{tarea}' "
                                        "en la lista de tareas üôÅ")

async def despejarunacompra_command(update: Update,
                                    context: ContextTypes.DEFAULT_TYPE):
    editor = EditorSheet()
    args = context.args
    procesado = procesar_par√°metros(args, 3)
    error = chequear_contenido_par√°metros(procesado, 2)
    if error:
        await update.message.reply_text(error)
        return
    categor√≠a, √≠tem = procesado
    async def procesar_diarias():
        categor√≠a_diarias = editor.Categor√≠aCompras.SUPERMERCADO
        mensaje = editor.despejar_compra(√≠tem, categor√≠a_diarias)
        if mensaje:
            await update.message.reply_text(mensaje)
            return
        else:
            categor√≠a_diarias = editor.Categor√≠aCompras.VERDULERIA
            mensaje = editor.despejar_compra(√≠tem, categor√≠a_diarias)
            if mensaje:
                await update.message.reply_text(mensaje)
                return
            else:
                await update.message.reply_text(f"Disculpame, no encontr√© el √≠tem '{√≠tem}' "
                                                f"en la lista de compras {categor√≠a_diarias.value[1]} üôÅ")
                return

    if categor√≠a == "diarias":
        await procesar_diarias()
        return
    elif categor√≠a_obj := chequear_categor√≠a_compras(categor√≠a):
        categor√≠a_compras = categor√≠a_obj
    else:
        categor√≠a_compras = None
        await update.message.reply_text("Por favor aclar√° 'diarias', 'supermercado', "
                                        "'verduler√≠a', 'mensuales' o 'juanito para definir "
                                        "la lista a despejar :)")
        return

    mensaje = editor.despejar_compra(√≠tem, categor√≠a_compras)
    if mensaje:
        await update.message.reply_text(mensaje)
    else:
        await update.message.reply_text(f"Disculpame, no encontr√© el √≠tem '{√≠tem}"
                                        "en la lista seleccionada üôÅ")
        
async def despejarregistrado_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    procesado = procesar_par√°metros(args, 4)
    mensaje = EditorSheet().despejar_registrado(procesado)
    await update.message.reply_text(mensaje)

##########################################################################
# Respuestas
##########################################################################
def handle_message(texto: str, update: Update):
    respuesta = Respuestas(texto, update).respuestas()
    return respuesta

async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Procesa los mensajes que no atraparon las funciones de comandos. En caso
    de ser un mensaje enviado en un grupo, revisa si el bot fue tageado para responder,
    y elimina el tag del bot del mensaje para enviar a procesarlo. Registra los mensajes
    s√≥lo si el bot fue tageado o le hablaron por privado.
    """
    message_type: str = update.message.chat.type
    texto: str = update.message.text

    if message_type == "group" or message_type == "supergroup":
        if BOT_USERNAME in texto:
            print(f'Usuario {update.effective_user.id} en {update.message.chat_id}: {texto}')
            texto:str = texto.replace(BOT_USERNAME, "").strip()
            respuesta: str = handle_message(texto, update)
        else:
            return
    else:
        print(f'Usuario {update.effective_user.id} en {update.message.chat_id}: {texto}')
        respuesta: str = handle_message(texto, update)
    
    print(f'Bot: {respuesta}')
    await update.message.reply_text(respuesta)

##########################################################################
# M√©todos pasivos
##########################################################################
async def enviar_mensaje(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text=str(context.job.data).strip())

async def recordatorios_quehaceres(context: ContextTypes.DEFAULT_TYPE):
    """
    Revisa si pas√≥ el tiempo apropiado en el recordatorio, y si s√≠, env√≠a un mensaje
    record√°ndolo y registra la fecha. Tambi√©n revisa si pas√≥ el tiempo 'snooze'
    desde la √∫ltima vez que lo hizo.
    """
    recordatorio_key = context.job.data[0]
    recordatorio_value = context.job.data[1]
    editor = EditorSheet()
    hoy = datetime.datetime.today().date()
    √∫ltimo = editor.get_√∫ltimo_quehacer(recordatorio_value["quehacer"])
    √∫ltimo_aviso = recordatorio_value["√∫ltimo_aviso"]
    √∫ltimo_aviso = datetime.datetime.strptime(√∫ltimo_aviso, "%Y/%m/%d").date() if √∫ltimo_aviso else None
    d√≠as_espera = int(recordatorio_value["d√≠as_espera"])
    snooze = int(recordatorio_value["snooze"])
    mensaje = (f"Parece que pasaron m√°s de {d√≠as_espera} d√≠as desde la √∫ltima vez"
        f" que {recordatorio_value["mensaje"]}. Quiz√°s convendr√≠a hacerlo hoy :)")

    def actualizar_√∫ltimo_aviso():
        recordatorio_value["√∫ltimo_aviso"] = hoy.strftime("%Y/%m/%d")
        # Actualiza el el campo de "√∫ltimo_aviso" al d√≠a de hoy, y lo escribe en el json
        RECORDATORIOS["recordatorios_quehaceres"][recordatorio_key] = recordatorio_value
        with open("secretos/recordatorios.json", "w") as file:
            json.dump(RECORDATORIOS, file, indent=2, ensure_ascii=False)

    if isinstance(√∫ltimo, str):
        if (not √∫ltimo_aviso or 
            (hoy - √∫ltimo_aviso).days > snooze):
            await context.bot.send_message(chat_id=context.job.chat_id, text=√∫ltimo)
            actualizar_√∫ltimo_aviso()
        return
    else:
        √∫ltimo = √∫ltimo.date()
    if ((hoy - √∫ltimo).days > d√≠as_espera and 
            ((hoy - √∫ltimo_aviso).days > snooze if √∫ltimo_aviso else not √∫ltimo_aviso)):
        await context.bot.send_message(chat_id=context.job.chat_id, text=mensaje)
        actualizar_√∫ltimo_aviso()
        return

async def procesar_boton_despejar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Funci√≥n que recibe un string de argumentos enviado por los Inline Keyboards (en este bot,
    particularmente, los de confirmaci√≥n de despejar listas) y llama a la funci√≥n adecuada.
    """
    query = update.callback_query
    args = [x.strip() for x in query.data.split()]
    categor√≠a = args[0]
    respuesta = args[1]

    if "0" == respuesta:
        mensaje = "Ok, dejo la lista como est√° :)"
    elif "1" == respuesta:
        # Si es diarias, que combina dos categor√≠as y por lo tanto no funciona con los algoritmos
        # comunes:
        if "diarias" == categor√≠a:
            editor = EditorSheet()
            editor.despejar_lista_compras(editor.Categor√≠aCompras.SUPERMERCADO)
            editor.despejar_lista_compras(editor.Categor√≠aCompras.VERDULERIA)
            mensaje = "Dale, ah√≠ despej√© las listas!"
        # Si es cualquier categor√≠a de la lista de categor√≠as, obtiene su objeto de categor√≠a
        # de Categor√≠aCompras
        elif categor√≠a_obj := chequear_categor√≠a_compras(categor√≠a):
            EditorSheet().despejar_lista_compras(categor√≠a_obj)
            mensaje = "Dale, ah√≠ despej√© la lista!"
        elif "tareas" == categor√≠a:
            EditorSheet().despejar_tareas()
            mensaje = "Despejada la lista de tareas! üôÇ"
        else:
            mensaje = "Algo fall√≥, no recib√≠ una categor√≠a apropiada. Pedile a Juan que se fije"
    else:
        mensaje = "Algo fall√≥, no recib√≠ una categor√≠a apropiada. Pedile a Juan que se fije"

    await query.answer()
    await query.edit_message_text(text = mensaje)


##########################################################################
# M√©todos auxiliares
##########################################################################
def procesar_par√°metros(args, modo: int):
    """
    Toma la lista args del contexto y la parsea
    :arg modo: 
    0: s√≥lo categor√≠a, sin args
    1: s√≥lo args, sin categor√≠a
    2: categor√≠a y args
    3: categor√≠a y un s√≥lo √≠tem
    4: un s√≥lo √≠tem, sin categor√≠a
    """
    match modo:
        case 0:
            if len(args) > 1 or not args:
                return None
            else:
                return unidecode(args[0]).strip().lower()
        case 1:
            if not args:
                return None
            else:
                return [x.strip().capitalize() for x in " ".join(args).split(",")]
        case 2:
            if len(args) < 2 or not args:
                return None
            else:
                categor√≠a = unidecode(args.pop(0)).strip().lower()
                lista = [x.strip().capitalize() for x in " ".join(args).split(",")]
                return (categor√≠a, lista)
        case 3:
            if len(args) < 2 or not args:
                return None
            else:
                categor√≠a = unidecode(args.pop(0)).strip().lower()
                √≠tem = " ".join(args).strip().capitalize()
                return (categor√≠a, √≠tem)
        case 4:
            if not args:
                return None
            else:
                return " ".join(args).strip().capitalize()

def chequear_contenido_par√°metros(par√°metros, modo):
    """
    Chequea si se recibieron los argumentos apropiados y, si no, genera mensaje de error.
    :arg modo:
    0: con categor√≠a, sin elemento/s
    1: con elemento/s, sin categor√≠a
    2: con cateogr√≠a y elemento/s
    """
    final_gen√©rico = (" Si usaste este comando tocando del men√∫, "
                        "procur√° tocar la flechita \u2199 a la derecha"
                        " del comando en vez "
                        "del comando en s√≠ :)")
    match modo:
        case 0:
            if not par√°metros:
                return ("‚ö†Ô∏èNo recib√≠ una categor√≠a para este comando üôÅ‚ö†Ô∏è \n" +
                        final_gen√©rico)
        case 1:
            if not par√°metros:
                return ("‚ö†Ô∏èNo recib√≠ una lista de elementos üôÅ‚ö†Ô∏è \nAcordate "
                        "de escribir los elementos separadas por comas!\n" + 
                        final_gen√©rico)
        case 2:
            if not par√°metros:
                return ("‚ö†Ô∏èMe falt√≥ recibir o una categor√≠a o una lista de elementos üôÅ‚ö†Ô∏è \nAcordate "
                        "de escribir una sola palabra como categor√≠a y, despu√©s, \n"
                        "los elementos separadas por comas!\n" +
                        final_gen√©rico)

def chequear_categor√≠a_compras(categor√≠a: str):
    """Itera sobre  las listas de palabras de cada categor√≠a clave(presentes en listas_compras
    del m√≥dulo de Respuestas) y extrae la Categor√≠aCompras correspondiente"""
    lista_palabras = Respuestas("", None).lista_compras
    categor√≠a = categor√≠a.strip()
    for key in lista_palabras:
        if categor√≠a in lista_palabras[key]:
            categor√≠a = key.upper()
            categor√≠a_obj = getattr(EditorSheet.Categor√≠aCompras, categor√≠a)
            return categor√≠a_obj

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caus√≥ el siguiente error: \n{context.error}")

##########################################################################
#M√©todos de inicializaci√≥n
##########################################################################
def inicializar_jobs(app):
    """Inicializa todos los Jobs"""

    inicializar_jobs_mensajes(app)
    inicializar_jobs_recordatorios(app)

    joblist = [x.name for x in app.job_queue.jobs()]
    print(f"Inicializado Jobqueues: {joblist}")

def inicializar_jobs_mensajes(app):
    if Mensajes.mensajes:
        for key, value in Mensajes.mensajes.items():
            name = key
            time, day, msg = value
            app.job_queue.run_daily(enviar_mensaje, time, day, name=name,
                                    chat_id=GROUP_ID, data=msg)

def inicializar_jobs_recordatorios(app):
    """
    Itera sobre los recordatorios registrados en el json recordatorios.json bajo
    la categor√≠a "recordatorios_quehaceres" y los registra en jobs con los par√°metros
    apropiados.
    """
    for recordatorio in RECORDATORIOS["recordatorios_quehaceres"].items():
        app.job_queue.run_daily(recordatorios_quehaceres, datetime.time(12, 0, 0),
                                name=recordatorio[0], chat_id=GROUP_ID,
                                data=recordatorio, job_kwargs={"misfire_grace_time": None})

class Mensajes :
    """Colecci√≥n de mensajes a ser asignados a jobs al inicializar
    el bot. Inicializados mediante 'inicializar_jobs_mensajes()'"""
    editor = EditorSheet()
    mensajes = {
        #"nombre_referencia": (datetime.time(18, 0, 0), (4, ),
        #    "Texto de referencia"),
    }

if __name__ == '__main__':

    #Definiendo constantes
    with open("secretos/tg_API.txt", "r", encoding="ascii") as file:
        TOKEN = str(file.read().strip())
    with open("secretos/bot_user.txt", "r", encoding="ascii") as file:
        BOT_USERNAME = str(file.read().strip())
    with open("secretos/group_id.txt", "r", encoding="ascii") as file:
        GROUP_ID = int(file.read().strip())
    with open("secretos/recordatorios.json", "r") as file:
        RECORDATORIOS = json.load(file)

    #Definiendo configuraci√≥n por defecto del bot
    defaults = Defaults(parse_mode="HTML", tzinfo=timezone("America/Argentina/Buenos_Aires"))
    print("Inicializando bot")
    print(f"Hora actual: {datetime.datetime.now(timezone("America/Argentina/Buenos_Aires"))}")
    app = Application.builder().token(TOKEN).defaults(defaults).build()

    #Inicializando Jobs
    inicializar_jobs(app)

    # Comandos
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('agregartareas', agregartareas_command))
    app.add_handler(CommandHandler('agregarcompras', agregarcompras_command))
    app.add_handler(CommandHandler('despejarcompras', despejarcompras_command))
    app.add_handler(CommandHandler('despejartareas', despejartareas_command))
    app.add_handler(CommandHandler('despejarunatarea', despejarunatarea_command))
    app.add_handler(CommandHandler('despejarunacompra', despejarunacompra_command))
    app.add_handler(CommandHandler('despejarlistacompras', despejarlistacompras_command))
    app.add_handler(CommandHandler('registrarviveres', registrarviveres_command))
    app.add_handler(CommandHandler('despejarregistrado', despejarregistrado_command))

    #COMANDOS DE DEBUG


    #Callbacks(botones apretados y dem√°s)
    app.add_handler(CallbackQueryHandler(procesar_boton_despejar))
    
    # Mensajes comunes
    app.add_handler(MessageHandler(filters.TEXT, check_message))

    # Error
    app.add_error_handler(error)

    #Inicializando polling (chequeo de updates)
    print("Polleando...")
    app.run_polling(poll_interval=1)
