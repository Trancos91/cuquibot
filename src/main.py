import datetime
from pytz import timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, Defaults, CallbackQueryHandler, PollAnswerHandler)
from unidecode import unidecode
from modulos.editor import EditorSheet
from modulos.respuestas import Respuestas


# Commands
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await update.message.reply_text('Holi, soy el Cuquibot, miau!'
        ' Escrib√≠ "/help" para ver los comandos disponibles :3')
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mensaje = ('Hola, nya! Soy la cuquibot üò∫\n'
    'Te paso la lista de comandos(instrucciones que empiezan con "/") y '
    'de palabras clave :)\n\n'
    'üìã <b><u>Lista de comandos:</u></b>\n'
    '  ‚Ä¢ <b>/agregartareas:</b> Agregar tareas a la lista de tareas. Separalas con comas!\n'
    '  ‚Ä¢ <b>/agregarcompras:</b> Agregar √≠tems a una lista de compras espec√≠fica. Escrib√≠'
    ' la primera palabra refiriendo a la lista, y despu√©s ingres√° las compras separadas por comas.'
    ' Por ejemplo: \n'
    '<pre>/agregarcompras super arroz, bicarbonato de sodio, az√∫car morena</pre>\n'
    '  ‚Ä¢ <b>/registrarviveres:</b> Agregar un √≠tem al registro de v√≠veres, a donde anotamos'
    ' las fechas de apertura y agotamiento de las cosas que compramos. Los √≠tems pueden '
    'contener la cantidad de ese √≠tem que se registra <i>entre par√©ntesis</i>. Por ejemplo:\n'
    '<pre>/registrarviveres Arroz(1kg), Lentejas(2kg), Leche de coco, Shampoo(500ml)</pre>\n'
    '  ‚Ä¢ <b>/despejartareas:</b> Despeja por completo la lista de tareas.\n'
    '  ‚Ä¢ <b>/despejarcompras:</b> Despeja por completo una lista de compras. Por ejemplo:\n'
    '<pre>/despejarcompras juanito</pre>\n'
    '  ‚Ä¢ <b>/despejarunatarea:</b> Despeja una tarea de la lista de tareas.\n'
    '  ‚Ä¢ <b>/despejarunacompra:</b> Despeja una compra de la lista de compras. Por ejemplo:\n'
    '<pre>/despejarunacompra super leche de coco</pre>\n'
    '  ‚Ä¢ <b>/despejarregistrado:</b> Despeja <i>las fechas de apertura y agotamiento</i> '
    'de un elemento del registro de v√≠veres, dej√°ndolo listo para volver a registrar. '
    '<b>No</b> despeja el elemento en s√≠ de la lista.\n\n'
    'üìã <b><u>Listas de compras:</u></b>\n'
    '  ‚Ä¢ Supermercado(o "super", o "chino")\n'
    '  ‚Ä¢ Verduler√≠a(o "verdu")\n'
    '  ‚Ä¢ Mensuales(compras del coto mensuales)\n'
    '  ‚Ä¢ Juanito\n'
    '  ‚Ä¢ Diarias(<i>s√≥lo se puede utilizar para acceder a la lista, no para agregar √≠tems. '
    'Combina las listas de Supermercado y Verduler√≠a</i>)\n\n'
    'üí° Por √∫ltimo, para acceder a la lista de palabras clave a las que respondo, '
    'que por lo general apuntan a pedidos de informaci√≥n o a anotar cosas m√°s cotidianas '
    'como los quehaceres, tageame y escrib√≠ <i>referencia</i> o <i>refe</i>'
        '(tambi√©n sirve <i>palabras</i>).')

    await update.message.reply_text(mensaje)

async def agregartareas_command(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = context.args
    tareas = procesar_par√°metros(args, 1)
    error = chequear_contenido_par√°metros(tareas, 1)
    if error:
        await update.message.reply_text(error)
    else:
        await update.message.reply_text(editor.agregar_√≠tems(tareas))

async def agregarcompras_command(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = context.args
    procesados = procesar_par√°metros(args, 2)
    error = chequear_contenido_par√°metros(procesados, 2)
    if error:
        print("Hay error")
        await update.message.reply_text(error)
        return
    if procesados:
        categor√≠a, compras = procesados
    match categor√≠a:
        case "supermercado" | "super" | "chino":
            categor√≠a_compras = editor.Categor√≠aCompras.SUPERMERCADO
        case "verduleria" | "verdu":
            categor√≠a_compras = editor.Categor√≠aCompras.VERDULERIA
        case "mensuales" | "mensual":
            categor√≠a_compras = editor.Categor√≠aCompras.MENSUALES
        case "juanito":
            categor√≠a_compras = editor.Categor√≠aCompras.JUANITO
        case _:
            await update.message.reply_text("No encontr√© la lista :(")
            return

    await update.message.reply_text(editor.agregar_√≠tems(compras, categor√≠a=categor√≠a_compras))

async def registrarviveres_command(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = context.args
    √≠tems = procesar_par√°metros(args, 1)
    error = chequear_contenido_par√°metros(√≠tems, 1)
    if error:
        print("Hay error")
        await update.message.reply_text(error)
        return
    else:
        await update.message.reply_text(editor.agregar_√≠tems(√≠tems, 1))


async def despejartareas_command(update: Update, 
                                      context: ContextTypes.DEFAULT_TYPE) -> None:
    """Confirma si borrar asistentes de la hoja"""
    keyboard = [
    [InlineKeyboardButton("üöß Despejar üöß", callback_data=("tareas 1"))],
    [InlineKeyboardButton("Cancelar", callback_data=("tareas 0"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("‚ö†Ô∏è Segurx quer√©s despejar la lista de tareas? ‚ö†Ô∏è", 
                                    reply_markup=reply_markup)

async def despejarcompras_command(update: Update, 
                                      context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    compra = procesar_par√°metros(args, 0)
    error = chequear_contenido_par√°metros(compra, 0)
    if error:
        await update.message.reply_text(error)
        return
    match compra:
        case ("diarias" | "verduleria" | "supermercado"| "mensuales" | "juanito"):
            pass
        case _:
            await update.message.reply_text("Por favor aclar√° 'diarias', "
                                            "'mensuales' o 'juanito para definir "
                                            "la lista a despejar :)")
            return

    """Confirma si borrar asistentes de la hoja"""
    keyboard = [
    [InlineKeyboardButton("üöß Despejar üöß", callback_data=(f"{compra} 1"))],
    [InlineKeyboardButton("Cancelar", callback_data=(f"{compra} 0"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(f"‚ö†Ô∏è Segurx quer√©s despejar la lista de compras? ‚ö†Ô∏è", 
                                    reply_markup=reply_markup)

async def despejarunatarea_command(update:Update,
                                    context: ContextTypes.DEFAULT_TYPE) -> None:
    editor = EditorSheet()
    args = ' '.join(context.args).replace('/despejarunatarea', '').strip()
    args = context.args
    tarea = procesar_par√°metros(args, 4)
    error = chequear_contenido_par√°metros(tarea, 1)
    if error:
        await update.message.reply_text(error)
        return
    if editor.despejar_tarea(tarea):
        await update.message.reply_text(f"Eliminada la tarea '{tarea}' de la "
            "lista de tareas pendientes para el jueves! üéâ")
    else:
        await update.message.reply_text(f"Disculpame, no encontr√© la tarea '{tarea}"
                                        "en la lista de tareas para el jueves üôÅ")

async def despejarunacompra_command(update: Update,
                                    context: ContextTypes.DEFAULT_TYPE):
    editor = EditorSheet()
    args = context.args
    procesado = procesar_par√°metros(args, 3)
    error = chequear_contenido_par√°metros(procesado, 2)
    if error:
        await update.message.reply_text(error)
        return
    categor√≠a, √≠tem = procesado
    async def procesar_diarias():
        categor√≠a_diarias = editor.Categor√≠aCompras.SUPERMERCADO
        if editor.despejar_compra(√≠tem, categor√≠a_diarias):
            await update.message.reply_text(f"Eliminado el √≠tem '{√≠tem}' de la "
                f"lista de compras {categor√≠a_diarias.value[1]}! üéâ")
            return
        else:
            categor√≠a_diarias = editor.Categor√≠aCompras.VERDULERIA
            if editor.despejar_compra(args, categor√≠a_diarias):
                await update.message.reply_text(f"Eliminado el √≠tem '{√≠tem}' de la "
                    f"lista de compras {categor√≠a_diarias.value[1]}! üéâ")
                return
            else:
                await update.message.reply_text(f"Disculpame, no encontr√© el √≠tem '{√≠tem}' "
                                                f"en la lista de compras {categor√≠a_diarias.value[1]} üôÅ")
                return

    match categor√≠a:
        case "diarias":
            print("Categor√≠a matche√≥ con 'diarias'")
            await procesar_diarias()
            return
        case ("super" | "supermercado" | "chino"):
            categor√≠a_compras = editor.Categor√≠aCompras.SUPERMERCADO
        case ("verdu" | "verduler√≠a" | "verduras" | "frutas"):
            categor√≠a_compras = editor.Categor√≠aCompras.VERDULERIA
        case "mensuales":
            categor√≠a_compras = editor.Categor√≠aCompras.MENSUALES
        case "juanito":
            categor√≠a_compras = editor.Categor√≠aCompras.JUANITO
        case _:
            categor√≠a_compras = None
            await update.message.reply_text("Por favor aclar√° 'diarias', 'supermercado', "
                                            "'verduler√≠a', mensuales' o 'juanito para definir "
                                            "la lista a despejar :)")
            return
    if editor.despejar_compra(√≠tem, categor√≠a_compras):
        await update.message.reply_text(f"Eliminado el √≠tem '{√≠tem}' de la "
            "lista seleccionada! üéâ")
    else:
        await update.message.reply_text(f"Disculpame, no encontr√© el √≠tem '{√≠tem}"
                                        "en la lista seleccionada üôÅ")
        
async def despejarregistrado_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    editor = EditorSheet()
    args = context.args
    procesado = procesar_par√°metros(args, 4)
    mensaje = editor.despejar_registrado(procesado)
    await update.message.reply_text(mensaje)

# Respuestas
def handle_message(texto: str, update: Update):
    respuesta = Respuestas(texto, update).respuestas()

    if respuesta:
        return respuesta
    else:
        print("No hubo respuesta generada")

async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    texto: str = update.message.text

    print(f'Usuario {update.message.chat.id} en {message_type}: {texto}')
    if message_type == "group" or message_type == "supergroup":
        if BOT_USERNAME in texto:
            texto:str = texto.replace(BOT_USERNAME, "").strip()
            respuesta: str = handle_message(texto, update)
        else:
            return
    else:
        respuesta: str = handle_message(texto, update)
    
    print(f'Bot: {respuesta}')
    await update.message.reply_text(respuesta)

# M√©todos pasivos

async def enviar_mensaje(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text=str(context.job.data).strip())

async def recordatorio_pendientes(context: ContextTypes.DEFAULT_TYPE):
    editor = EditorSheet()
    mensaje = (
            "Holi, c√≥mo viene ese viernes? Parece que quedaron algunas tareas pendientes"
            " en la lista de tareas de la semana pasada. Son cosas que necesitemos hacer a√∫n?"
            " Si no es as√≠, pueden escribir /despejarlistatareas para eliminar la lista "
            "y arrancar la semana que viene con la hoja en blanco üôÇ")
    if editor.get_pendientes_jueves:
        await context.bot.send_message(chat_id=context.job.chat_id, text=mensaje)
    else:
        return

async def procesar_boton_despejar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    editor = EditorSheet()
    await query.answer()

    if "diarias" in query.data:
        if "0" in query.data:
            await query.edit_message_text(text="Ok, dejo la lista como est√° :)")
        elif "1" in query.data:
            editor.despejar_compras(editor.Categor√≠aCompras.SUPERMERCADO)
            editor.despejar_compras(editor.Categor√≠aCompras.VERDULERIA)
            await query.edit_message_text(text="Dale, ah√≠ despej√© las listas!")
    if "mensuales" in query.data:
        if "0" in query.data:
            await query.edit_message_text(text="Ok, dejo la lista como est√° :)")
        elif "1" in query.data:
            editor.despejar_compras(editor.Categor√≠aCompras.MENSUALES)
            await query.edit_message_text(text="Dale, ah√≠ despej√© la lista!")
    elif "juanito" in query.data:
        if "0" in query.data:
            await query.edit_message_text(text="Ok, dejo la lista como est√° :)")
        if "1" in query.data:
            editor.despejar_compras(editor.Categor√≠aCompras.JUANITO)
            await query.edit_message_text(text="Dale, ah√≠ despej√© la lista!")
    elif "tareas" in query.data:
        if "0" in query.data:
            await query.edit_message_text(text="Ok, dejo la lista como est√° :)")
        if "1" in query.data:
            editor.despejar_tareas()
            await query.edit_message_text(text="Despejada la lista de tareas! üôÇ")
    if "supermercado" in query.data:
        if "0" in query.data:
            await query.edit_message_text(text="Ok, dejo la lista como est√° :)")
        elif "1" in query.data:
            editor.despejar_compras(editor.Categor√≠aCompras.SUPERMERCADO)
            await query.edit_message_text(text="Dale, ah√≠ despej√© la lista!")
    if "verduleria" in query.data:
        if "0" in query.data:
            await query.edit_message_text(text="Ok, dejo la lista como est√° :)")
        elif "1" in query.data:
            editor.despejar_compras(editor.Categor√≠aCompras.VERDULERIA)
            await query.edit_message_text(text="Dale, ah√≠ despej√© la lista!")

def procesar_par√°metros(args, modo: int):
    """Toma la lista args del contexto y la parsea
    :arg modo: 
    0: s√≥lo categor√≠a, sin args
    1: s√≥lo args, sin categor√≠a
    2: categor√≠a y args
    3: categor√≠a y un s√≥lo √≠tem
    4: un s√≥lo √≠tem, sin categor√≠a
    """
    match modo:
        case 0:
            if len(args) > 1 or not args:
                return None
            else:
                return unidecode(args[0]).strip().lower()
        case 1:
            if not args:
                return None
            else:
                return [x.strip().capitalize() for x in " ".join(args).split(",")]
        case 2:
            if len(args) < 2 or not args:
                return None
            else:
                categor√≠a = unidecode(args.pop(0)).strip().lower()
                lista = [x.strip().capitalize() for x in " ".join(args).split(",")]
                return (categor√≠a, lista)
        case 3:
            if len(args) < 2 or not args:
                return None
            else:
                categor√≠a = unidecode(args.pop(0)).strip().lower()
                √≠tem = " ".join(args).strip().capitalize()
                return (categor√≠a, √≠tem)
        case 4:
            if not args:
                return None
            else:
                return " ".join(args).strip().capitalize()

def chequear_contenido_par√°metros(par√°metros, modo):
    """
    Chequea si se recibieron los argumentos apropiados y, si no, genera mensaje de error.
    :arg modo:
    0: con categor√≠a, sin elemento/s
    1: con elemento/s, sin categor√≠a
    2: con cateogr√≠a y elemento/s
    """
    final_gen√©rico = (" Si usaste este comando tocando del men√∫, "
                        "procur√° tocar la flechita \u2199 a la derecha"
                        " del comando en vez "
                        "del comando en s√≠ :)")
    match modo:
        case 0:
            if not par√°metros:
                return ("‚ö†Ô∏èNo recib√≠ una categor√≠a para este comando üôÅ‚ö†Ô∏è \n" +
                        final_gen√©rico)
        case 1:
            if not par√°metros:
                return ("‚ö†Ô∏èNo recib√≠ una lista de elementos üôÅ‚ö†Ô∏è \nAcordate "
                        "de escribir los elementos separadas por comas!\n" + 
                        final_gen√©rico)
        case 2:
            if not par√°metros:
                return ("‚ö†Ô∏èMe falt√≥ recibir o una categor√≠a o una lista de elementos üôÅ‚ö†Ô∏è \nAcordate "
                        "de escribir una sola palabra como categor√≠a y, despu√©s, \n"
                        "los elementos separadas por comas!\n" +
                        final_gen√©rico)


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caus√≥ error {context.error}")

#M√©todos de inicializaci√≥n

def inicializar_jobs(app):
    """Inicializa todos los Jobs"""

    app.job_queue.run_daily(recordatorio_pendientes,
                            datetime.time(12, 0, 0),
                            (4, ), name="recordatorio_pendientes",
                            chat_id=GROUP_ID)

    inicializar_jobs_mensajes(app)

    joblist = [x.name for x in app.job_queue.jobs()]
    print(f"Inicializado Jobqueues: {joblist}")

def inicializar_jobs_mensajes(app):
    for key, value in Mensajes.mensajes.items():
        name = key
        time, day, msg = value
        app.job_queue.run_daily(enviar_mensaje, time, day, name=name,
                                chat_id=GROUP_ID, data=msg)

class Mensajes :
    """Colecci√≥n de mensajes a ser asignados a jobs al inicializar
    el bot. Inicializados mediante 'inicializar_jobs_mensajes()'"""
    editor = EditorSheet()
    mensajes = {
        "nombre_referencia": (datetime.time(18, 0, 0), (4, ),
            "Texto de referencia"),
    }

if __name__ == '__main__':

    #Definiendo constantes
    with open("secretos/tg_API.txt", "r", encoding="ascii") as file:
        TOKEN = str(file.read().strip())
    with open("secretos/bot_user.txt", "r", encoding="ascii") as file:
        BOT_USERNAME = str(file.read().strip())
    with open("secretos/group_id.txt", "r", encoding="ascii") as file:
        GROUP_ID = int(file.read().strip())

    #Definiendo configuraci√≥n por defecto del bot
    defaults = Defaults(parse_mode="HTML", tzinfo=timezone("America/Argentina/Buenos_Aires"))
    print("Inicializando bot")
    print(f"Hora actual: {datetime.datetime.now(timezone("America/Argentina/Buenos_Aires"))}")
    app = Application.builder().token(TOKEN).defaults(defaults).build()

    #Inicializando Jobs
    inicializar_jobs(app)

    # Comandos
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('agregartareas', agregartareas_command))
    app.add_handler(CommandHandler('agregarcompras', agregarcompras_command))
    app.add_handler(CommandHandler('despejarcompras', despejarcompras_command))
    app.add_handler(CommandHandler('despejartareas', despejartareas_command))
    app.add_handler(CommandHandler('despejarunatarea', despejarunatarea_command))
    app.add_handler(CommandHandler('despejarunacompra', despejarunacompra_command))
    app.add_handler(CommandHandler('registrarviveres', registrarviveres_command))
    app.add_handler(CommandHandler('despejarregistrado', despejarregistrado_command))

    #COMANDOS DE DEBUG


    #Callbacks(botones apretados y dem√°s)
    app.add_handler(CallbackQueryHandler(procesar_boton_despejar))
    
    # Mensajes comunes
    app.add_handler(MessageHandler(filters.TEXT, check_message))

    # Error
    app.add_error_handler(error)

    #Inicializando polling (chequeo de updates)
    print("Polleando...")
    app.run_polling(poll_interval=1)
